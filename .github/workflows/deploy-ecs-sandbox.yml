name: Deploy-Sandbox

on:
    push:
        branches:
            - 'sandbox'

env:
    AWS_REGION: ap-northeast-2
    ECR_REPOSITORY: sandbox-onboard
    ECS_SERVICE: sandbox-onboard-api-service
    ECS_CLUSTER: sandbox-onboard
    ECS_TASK_DEFINITION: sandbox-onboard-api-task-definition
    CONTAINER_NAME: sandbox-onboard-api-container

jobs:
    test:
        name: Test
        runs-on: ubuntu-latest
        environment: sandbox

        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Set up JDK 17
                uses: actions/setup-java@v3
                with:
                    java-version: '17'
                    distribution: 'adopt'

            -   name: Grant execute permission for gradlew
                run: chmod +x gradlew

            -   name: Check ktlint format
                run: ./gradlew clean ktlintCheck

            -   name: Test with Gradle
                run: ./gradlew test
    build:
        name: Build
        runs-on: ubuntu-latest
        environment: sandbox
        outputs:
            image: echo ${{ steps.build-image.outputs.image }}
        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_FOR_ECS }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FOR_ECS }}
                    aws-region: ${{ env.AWS_REGION }}

            -   name: Login to Amazon ECR
                id: login-ecr
                uses: aws-actions/amazon-ecr-login@v1

            -   name: Create .env File
                run: |
                    echo "${{ vars.NODE_ENV }}" >> adapter-in/admin/frontend/.env

            -   name: Build, tag, and push image to Amazon ECR
                id: build-image
                env:
                    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                    IMAGE_TAG: ${{ github.sha }}
                run: |
                    # Build a docker image and
                    # push it to ECR so that it can
                    # be deployed to ECS.
                    docker build \
                    --build-arg PHASE=${{ vars.PHASE }} \
                    -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                    echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        environment: sandbox
        needs:
            - test
            - build
        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_FOR_ECS }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FOR_ECS }}
                    aws-region: ${{ env.AWS_REGION }}

            -   name: Login to Amazon ECR
                id: login-ecr
                uses: aws-actions/amazon-ecr-login@v1

            -   name: Download Task Definition
                run: |
                    aws ecs describe-task-definition \
                      --task-definition $ECS_TASK_DEFINITION \
                      --query taskDefinition \
                      > task-definition.json

            -   name: Fill in the new image ID in the Amazon ECS task definition
                id: task-def
                env:
                    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                    IMAGE_TAG: ${{ github.sha }}
                uses: aws-actions/amazon-ecs-render-task-definition@v1
                with:
                    task-definition: task-definition.json
                    container-name: ${{ env.CONTAINER_NAME }}
                    image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

            -   name: Deploy Amazon ECS task definition
                uses: aws-actions/amazon-ecs-deploy-task-definition@v1
                with:
                    task-definition: ${{ steps.task-def.outputs.task-definition }}
                    service: ${{ env.ECS_SERVICE }}
                    cluster: ${{ env.ECS_CLUSTER }}
                    wait-for-service-stability: true
